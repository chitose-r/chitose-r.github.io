<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python</title>
      <link href="/python/"/>
      <url>/python/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch(1)-基础与张量转换</title>
      <link href="/Pytorch-1-%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%BC%A0%E9%87%8F%E8%BD%AC%E6%8D%A2/"/>
      <url>/Pytorch-1-%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%BC%A0%E9%87%8F%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-导入库和版本"><a href="#1-导入库和版本" class="headerlink" title="1.导入库和版本"></a>1.导入库和版本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br></pre></td></tr></table></figure><pre><code>2.1.0</code></pre><h3 id="2-张量的创建方法"><a href="#2-张量的创建方法" class="headerlink" title="2.张量的创建方法"></a>2.张量的创建方法</h3><ul><li>包括<code>列表</code>、<code>元组</code>、<code>数组</code>的创建</li><li><code>列表/元组</code>默认是<strong>int64/float32</strong></li><li><code>数组</code>默认是<strong>int32/float64</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">t1=torch.tensor([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">t2=torch.tensor((<span class="number">1</span>,<span class="number">2</span>)) </span><br><span class="line">t3=torch.tensor(<span class="number">1</span>+<span class="number">2j</span>)</span><br><span class="line">t4=torch.tensor([<span class="literal">True</span>,<span class="literal">True</span>])</span><br><span class="line">t5=torch.tensor(np.array([<span class="number">1</span>,<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line"><span class="built_in">print</span>(t3)</span><br><span class="line"><span class="built_in">print</span>(t4)</span><br><span class="line"><span class="built_in">print</span>(t5)</span><br></pre></td></tr></table></figure><pre><code>tensor([1, 2])tensor([1, 2])tensor(1.+2.j)tensor([True, True])tensor([1, 2], dtype=torch.int32)</code></pre><h3 id="3-torch数据类型大全"><a href="#3-torch数据类型大全" class="headerlink" title="3. torch数据类型大全"></a>3. torch数据类型大全</h3><div class="table-container"><table><thead><tr><th>Torch Type</th><th>Alias</th></tr></thead><tbody><tr><td><strong><code>torch.float64</code></strong></td><td><strong><code>torch.double</code></strong></td></tr><tr><td><code>torch.float32</code></td><td><code>torch.float</code></td></tr><tr><td><code>torch.float16</code></td><td><code>torch.half</code></td></tr><tr><td><strong><code>torch.int64</code></strong></td><td><strong><code>torch.long</code></strong></td></tr><tr><td><code>torch.int32</code></td><td><code>torch.int</code></td></tr><tr><td><code>torch.int16</code></td><td><code>torch.short</code></td></tr><tr><td><code>torch.uint8</code></td><td></td></tr><tr><td><code>torch.int8</code></td><td></td></tr><tr><td><strong><code>torch.bool</code></strong></td><td></td></tr><tr><td><code>torch.complex64</code></td></tr></tbody></table></div><h3 id="4-隐式转换"><a href="#4-隐式转换" class="headerlink" title="4. 隐式转换"></a>4. 隐式转换</h3><ul><li>浮点型&gt;整数型&gt;布尔型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(torch.tensor([<span class="number">1.1</span>,<span class="number">2.7</span>],dtype = torch.uint8))</span><br></pre></td></tr></table></figure><pre><code>tensor([1, 2], dtype=torch.uint8)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(torch.tensor([<span class="number">1.1</span>,<span class="number">2</span>]).dtype)</span><br><span class="line"><span class="built_in">print</span>(torch.tensor([<span class="number">2</span>,<span class="literal">True</span>]).dtype)</span><br></pre></td></tr></table></figure><pre><code>torch.float32torch.int64</code></pre><h3 id="5-显示转换（方法）"><a href="#5-显示转换（方法）" class="headerlink" title="5. 显示转换（方法）"></a>5. 显示转换（方法）</h3><ul><li><code>不改变</code>原数据类型</li><li>检查类型用<code>dtype</code></li><li><code>half</code>/<code>float</code>/<code>double</code>/<code>short</code>/<code>int</code>/<code>long</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = torch.tensor([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(t.<span class="built_in">float</span>())</span><br><span class="line"><span class="built_in">print</span>(t.dtype)</span><br></pre></td></tr></table></figure><pre><code>tensor([1., 2.])torch.int64</code></pre><h3 id="6-一维度情况的维度形变"><a href="#6-一维度情况的维度形变" class="headerlink" title="6. 一维度情况的维度形变"></a>6. 一维度情况的维度形变</h3><p>在PyTorch中，<code>shape</code>与<code>size()</code>用于查看张量的<code>形状</code>。以下是一些常用的属性和方法：</p><div class="table-container"><table><thead><tr><th>属性/方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>ndim</code></td><td>维度</td><td>查看张量的维度数</td></tr><tr><td><code>shape</code></td><td>形状</td><td>查看张量的形状，与<code>size()</code>相同</td></tr><tr><td><code>size()</code></td><td>形状</td><td>查看张量的形状，与<code>shape</code>相同</td></tr><tr><td><code>numel()</code></td><td>元素数量</td><td>查看张量的元素总数</td></tr><tr><td><code>len()</code></td><td>元素数量</td><td>在一维中与<code>numel()</code>相同</td></tr></tbody></table></div><ul><li><strong>注意</strong>：在一维张量中，<code>numel()</code> 和 <code>len()</code> 返回相同的结果，都表示张量的元素数量。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ndim:\t&#x27;</span>,torch.tensor([<span class="number">1</span>,<span class="number">2</span>]).ndim) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;shape:\t&#x27;</span>,torch.tensor([<span class="number">1</span>,<span class="number">2</span>]).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;size():\t&#x27;</span>,torch.tensor([<span class="number">1</span>,<span class="number">2</span>]).size())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;numel():&#x27;</span>,torch.tensor([<span class="number">1</span>,<span class="number">2</span>]).numel())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;len():\t&#x27;</span>,<span class="built_in">len</span>(torch.tensor([<span class="number">1</span>,<span class="number">2</span>])))</span><br></pre></td></tr></table></figure><pre><code>ndim:       1shape:      torch.Size([2])size():     torch.Size([2])numel():    2len():      2</code></pre><h3 id="7-二维度情况的维度形变"><a href="#7-二维度情况的维度形变" class="headerlink" title="7. 二维度情况的维度形变"></a>7. 二维度情况的维度形变</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ndim:\t&#x27;</span>,torch.tensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]).ndim)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;shape:\t&#x27;</span>,torch.tensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;size():\t&#x27;</span>,torch.tensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]).size()) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;numel():&#x27;</span>,torch.tensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]).numel()) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;len():\t&#x27;</span>,<span class="built_in">len</span>(torch.tensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])))</span><br></pre></td></tr></table></figure><pre><code>ndim:       2shape:      torch.Size([2, 2])size():     torch.Size([2, 2])numel():    4len():      2</code></pre><h3 id="8-三维度情况的维度形变"><a href="#8-三维度情况的维度形变" class="headerlink" title="8. 三维度情况的维度形变"></a>8. 三维度情况的维度形变</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ndim:\t&#x27;</span>,torch.tensor([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]],[[<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>]]]).ndim)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;shape:\t&#x27;</span>,torch.tensor([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]],[[<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>]]]).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;size():\t&#x27;</span>,torch.tensor([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]],[[<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>]]]).size()) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;numel():&#x27;</span>,torch.tensor([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]],[[<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>]]]).numel()) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;len():\t&#x27;</span>,<span class="built_in">len</span>(torch.tensor([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]],[[<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>]]])))</span><br></pre></td></tr></table></figure><pre><code>ndim:       3shape:      torch.Size([2, 2, 3])size():     torch.Size([2, 2, 3])numel():    12len():      2</code></pre><h3 id="9-零维张量"><a href="#9-零维张量" class="headerlink" title="9. 零维张量"></a>9. 零维张量</h3><ul><li><strong>零维张量</strong>：PyTorch中的单个数值，具有张量属性（如 <code>torch.tensor(1)</code>）。</li><li><strong>标量</strong>：Python中的单个数值，不具备张量属性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ndim:\t&#x27;</span>,torch.tensor(<span class="number">1</span>).ndim)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;shape:\t&#x27;</span>,torch.tensor(<span class="number">1</span>).shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;size():\t&#x27;</span>,torch.tensor(<span class="number">1</span>).size()) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;numel():&#x27;</span>,torch.tensor(<span class="number">1</span>).numel()) </span><br><span class="line"><span class="comment"># print(&#x27;len():\t&#x27;,len(torch.tensor(1))) 报错，零维张量不能len()</span></span><br></pre></td></tr></table></figure><pre><code>ndim:    0shape:   torch.Size([])size():  torch.Size([])numel(): 1</code></pre><h3 id="10-张量的形变"><a href="#10-张量的形变" class="headerlink" title="10.张量的形变"></a>10.张量的形变</h3><ul><li><code>N维、0维</code>flatten()后被变为<code>1维</code></li><li>flatten()和reshape()均<code>不会对原张量造成影响</code></li><li>reshape(4),reshape(4,)<code>均为1维</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(torch.tensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]).flatten())</span><br><span class="line"><span class="built_in">print</span>(torch.tensor(<span class="number">1</span>).flatten())</span><br><span class="line"><span class="built_in">print</span>(torch.tensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]).reshape(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(torch.tensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]).reshape(<span class="number">4</span>,))</span><br><span class="line"><span class="built_in">print</span>(torch.tensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]).reshape(<span class="number">1</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><pre><code>tensor([1, 2, 3, 4])tensor([1])tensor([1, 2, 3, 4])tensor([1, 2, 3, 4])tensor([[1, 2, 3, 4]])</code></pre><h3 id="11-特殊张量的创建"><a href="#11-特殊张量的创建" class="headerlink" title="11.特殊张量的创建"></a>11.特殊张量的创建</h3><ul><li><code>1/0/empty</code>只填size参数时,无括号/圆括号/方括号均可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(torch.zeros(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(torch.ones((<span class="number">2</span>,<span class="number">3</span>)))</span><br><span class="line"><span class="built_in">print</span>(torch.empty([<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line"><span class="built_in">print</span>(torch.full((<span class="number">2</span>,<span class="number">3</span>),<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(torch.eye(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(torch.diag(torch.tensor([<span class="number">1</span>,<span class="number">2</span>])))</span><br></pre></td></tr></table></figure><pre><code>tensor([[0., 0., 0.],        [0., 0., 0.]])tensor([[1., 1., 1.],        [1., 1., 1.]])tensor([[1., 1., 1.],        [1., 1., 1.]])tensor([[1, 1, 1],        [1, 1, 1]])tensor([[1., 0., 0.],        [0., 1., 0.],        [0., 0., 1.]])tensor([[1, 0],        [0, 2]])</code></pre><h3 id="12-随机张量的创建"><a href="#12-随机张量的创建" class="headerlink" title="12.随机张量的创建"></a>12.随机张量的创建</h3><div class="table-container"><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>rand()</code></td><td>0-1均匀分布</td></tr><tr><td><code>randn()</code></td><td>标准正态分布</td></tr><tr><td><code>normal()</code></td><td>服从指定正态分布</td></tr><tr><td><code>randint()</code></td><td>整数随机采样</td></tr><tr><td><code>arange</code>/<code>linspace</code></td><td>生成数列</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(torch.rand(<span class="number">2</span>,<span class="number">3</span>)) </span><br><span class="line"><span class="built_in">print</span>(torch.randn(<span class="number">2</span>,<span class="number">3</span>))  </span><br><span class="line"><span class="built_in">print</span>(torch.normal(<span class="number">2</span>,<span class="number">3</span>,size=(<span class="number">2</span>,<span class="number">2</span>))) </span><br><span class="line"><span class="built_in">print</span>(torch.randint(<span class="number">1</span>,<span class="number">10</span>,size=[<span class="number">2</span>,<span class="number">4</span>])) </span><br><span class="line"><span class="built_in">print</span>(torch.arange(<span class="number">0</span>,<span class="number">5</span>,<span class="number">3</span>)) </span><br><span class="line"><span class="built_in">print</span>(torch.linspace(<span class="number">0</span>,<span class="number">5</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><pre><code>tensor([[0.7878, 0.6142, 0.6865],        [0.1155, 0.4820, 0.1763]])tensor([[ 0.0174,  1.1351, -0.1324],        [-0.2343, -0.0504,  0.1417]])tensor([[1.1347, 1.6557],        [3.1312, 2.9998]])tensor([[5, 2, 3, 8],        [2, 8, 8, 5]])tensor([0, 3])tensor([0.0000, 1.6667, 3.3333, 5.0000])</code></pre><h3 id="13-tensor-numpy-list相互转换"><a href="#13-tensor-numpy-list相互转换" class="headerlink" title="13.tensor/numpy/list相互转换"></a>13.tensor/numpy/list相互转换</h3><ul><li><code>list(t)</code>是转换为<code>零维张量</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t = torch.tensor([<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(t.numpy())</span><br><span class="line"><span class="built_in">print</span>(np.array(t))</span><br><span class="line"><span class="built_in">print</span>(t.tolist())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(t))</span><br><span class="line"><span class="built_in">print</span>(t.item())</span><br></pre></td></tr></table></figure><pre><code>[1][1][1][tensor(1)]1</code></pre><h3 id="14-张量的浅拷贝与深拷贝"><a href="#14-张量的浅拷贝与深拷贝" class="headerlink" title="14. 张量的浅拷贝与深拷贝"></a>14. 张量的浅拷贝与深拷贝</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = torch.tensor([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">t2 = t1  <span class="comment"># 浅拷贝，动一个则变另一个</span></span><br><span class="line">t3=t1.clone()  <span class="comment"># 深拷贝，动一个则另一个不变</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 </tag>
            
            <tag> 标签A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二篇文章</title>
      <link href="/2/"/>
      <url>/2/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第二篇文章"><a href="#这是我的第二篇文章" class="headerlink" title="这是我的第二篇文章"></a>这是我的第二篇文章</h2>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三篇文章</title>
      <link href="/3/"/>
      <url>/3/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第三篇文章"><a href="#这是我的第三篇文章" class="headerlink" title="这是我的第三篇文章"></a>这是我的第三篇文章</h2>]]></content>
      
      
      <categories>
          
          <category> Embedded </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- GitCalendar容器 --><div id="gitZone"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/light.js"/>
      <url>/js/light.js</url>
      
        <content type="html"><![CDATA[// 霓虹灯效果// 颜色数组var arr = ["#39c5bb", "#f14747", "#f1a247", "#f1ee47", "#b347f1", "#1edbff", "#ed709b", "#5636ed"];// 颜色索引var idx = 0;// 切换颜色function changeColor() {    // 仅夜间模式才启用    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = arr[idx] + " 0 0 10px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = arr[idx] + " 0 0 5px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = arr[idx] + " 0 0 12px";            document.getElementsByClassName("author-info__description")[0].style.textShadow = arr[idx] + " 0 0 12px";        } catch {                    }        idx++;        if (idx == 8) {            idx = 0;        }    } else {        // 白天模式恢复默认        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = "#1e1e1ee0 1px 1px 1px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = "";            document.getElementsByClassName("author-info__description")[0].style.textShadow = "";        } catch {                    }    }}// 开启计时器window.onload = setInterval(changeColor, 1200);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(0, 0, 255)'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[function createtime() {    var now = new Date(); // 获取当前时间    var startDate = new Date("12/17/2023 21:00:00"); // 网站开始运行的日期，按需更改    var elapsed = now - startDate; // 计算流逝的时间    var seconds = Math.floor(elapsed / 1000);    var minutes = Math.floor(seconds / 60);    var hours = Math.floor(minutes / 60);    var days = Math.floor(hours / 24);    seconds %= 60; // 剩余秒数    minutes %= 60; // 剩余分钟数    hours %= 24; // 剩余小时数    // 确保时间是两位数字格式    var secondsStr = seconds < 10 ? "0" + seconds : seconds;    var minutesStr = minutes < 10 ? "0" + minutes : minutes;    var hoursStr = hours < 10 ? "0" + hours : hours;    // 更新网站内容    var c = `<div style="font-size:13px;font-weight:bold">本站居然运行了 ${days} 天 ${hoursStr} 小时 ${minutesStr} 分 ${secondsStr} 秒</div>`;    document.getElementById("workboard").innerHTML = c;}setInterval(createtime, 1000); // 每秒更新一次]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }/* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {  background: #1e1e1e;  color: antiquewhite;}/* 鼠标悬浮状态 */[data-theme="dark"] .magnet_link_context:hover {  background: #3ecdf1;  color: #f2f2f2;}@font-face {  /* 为载入的字体取名字(随意) */  font-family: 'YSHST';  /* 字体文件地址(相对或者绝对路径都可以) */  src: url(/font/poppins-black-webfont.woff2);  /* 定义加粗样式(加粗多少) */  font-weight: normal;  /* 定义字体样式(斜体/非斜体) */  font-style: normal;  /* 定义显示样式 */  font-display: block;}/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(5) .menus_item_child {  left: -38px;}/* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {  text-shadow: 0 0 2px var(--theme-color) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {  text-shadow: 0 0 2px var(--theme-color) !important;}/* 闪烁变动颜色连续渐变 *//* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {  animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {  animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {  animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {  animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {  0% {    text-shadow: #5636ed 0 0 15px;  }  12.5% {    text-shadow: #11ee5e 0 0 15px;  }  25% {    text-shadow: #f14747 0 0 15px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 15px;  }  50% {    text-shadow: #b347f1 0 0 15px;  }  62.5% {    text-shadow: #002afa 0 0 15px;  }  75% {    text-shadow: #ed709b 0 0 15px;  }  87.5% {    text-shadow: #39c5bb 0 0 15px;  }  100% {    text-shadow: #5636ed 0 0 15px;  }}@keyframes light_10px {  0% {    text-shadow: #5636ed 0 0 10px;  }  12.5% {    text-shadow: #11ee5e 0 0 10px;  }  25% {    text-shadow: #f14747 0 0 10px;  }  37.5% {    text-shadow: #f1a247 0 0 10px;  }  50% {    text-shadow: #f1ee47 0 0 10px;  }  50% {    text-shadow: #b347f1 0 0 10px;  }  62.5% {    text-shadow: #002afa 0 0 10px;  }  75% {    text-shadow: #ed709b 0 0 10px;  }  87.5% {    text-shadow: #39c5bb 0 0 10px;  }  100% {    text-shadow: #5636ed 0 0 10px;  }}@keyframes light_5px {  0% {    text-shadow: #5636ed 0 0 5px;  }  12.5% {    text-shadow: #11ee5e 0 0 5px;  }  25% {    text-shadow: #f14747 0 0 5px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 5px;  }  50% {    text-shadow: #b347f1 0 0 5px;  }  62.5% {    text-shadow: #002afa 0 0 5px;  }  75% {    text-shadow: #ed709b 0 0 5px;  }  87.5% {    text-shadow: #39c5bb 0 0 5px;  }  100% {    text-shadow: #5636ed 0 0 5px;  }}/* 背景宇宙星光  */#universe{  display: block;  position: fixed;  margin: 0;  padding: 0;  border: 0;  outline: 0;  left: 0;  top: 0;  width: 100%;  height: 100%;  pointer-events: none;  /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */  z-index: -1;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,      #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background: rgb(101, 153, 245);  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.1;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>添加我的QQ</title>
      <link href="/qq/index.html"/>
      <url>/qq/index.html</url>
      
        <content type="html"><![CDATA[<p><img src="../img/QQ.jpg" alt="我的QQ二维码"></p>]]></content>
      
    </entry>
    
    
  
</search>
